name: build-and-deploy

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1) Repo auschecken
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Cache für Paket-/Symbolordner
      - name: Cache AL package cache
        uses: actions/cache@v4
        with:
          path: |
            ./.alpackages
          key: alpackages-${{ runner.os }}-${{ hashFiles('bc/src/app.json') }}

      # 3) Ordner anlegen
      - name: Ensure build folders
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path ".alpackages" | Out-Null
          New-Item -ItemType Directory -Force -Path "bc/dist" | Out-Null

      # 4) BcContainerHelper-Module (wir nutzen nur die Artifact-Helper)
      - name: Install BcContainerHelper
        shell: pwsh
        run: |
          Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
          Install-Module BcContainerHelper -Scope CurrentUser -Force
          Import-Module  BcContainerHelper

      # 5) Symbole (System & Application) für BC v25 (W1) aus den Artifacts kopieren
      #    W1 ist kleiner/schneller und reicht i.d.R. für System/Application.
      - name: Download BC v25 symbols (System & Application)
        shell: pwsh
        run: |
          $artifactUrl = Get-BCArtifactUrl -type Sandbox -version 25 -country w1
          Write-Host "Artifact URL: $artifactUrl"
          $root = Download-Artifacts -artifactUrl $artifactUrl -includePlatform -verbose
          Write-Host "Artifacts downloaded to: $root"

          $apps = Get-ChildItem -Path $root -Recurse -Filter *.app
          $systemApp = $apps | Where-Object { $_.Name -match '^Microsoft_.*System.*\.app$' } | Select-Object -First 1
          $applicationApp = $apps | Where-Object { $_.Name -match '^Microsoft_.*Application.*\.app$' } | Select-Object -First 1

          if (-not $systemApp -or -not $applicationApp) {
            $apps | Select-Object FullName | Out-Host
            throw "Could not locate System/Application symbol apps in artifacts."
          }

          Copy-Item $systemApp.FullName      ".alpackages/Microsoft_System.app"       -Force
          Copy-Item $applicationApp.FullName ".alpackages/Microsoft_Application.app" -Force

          Write-Host "Copied symbols:"
          Get-ChildItem ".alpackages" | Select-Object Name,Length | Format-Table -AutoSize

      # 6) AL Language (VSIX) laden und alc.exe extrahieren
      - name: Download AL Language VSIX (latest)
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $vsixUrl = "https://marketplace.visualstudio.com/_apis/public/gallery/publishers/ms-dynamics-smb/vsextensions/al/latest/vspackage"
          Invoke-WebRequest -Uri $vsixUrl -OutFile al.vsix -UseBasicParsing
          if (!(Test-Path al.vsix) -or ((Get-Item al.vsix).Length -lt 100KB)) { throw "AL VSIX download failed." }

      - name: Extract alc.exe from VSIX
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory("al.vsix", "al_ext")
          $alc = Get-ChildItem -Path "al_ext" -Recurse -Filter "alc.exe" | Select-Object -First 1
          if (-not $alc) {
            Get-ChildItem -Path "al_ext" -Recurse | Select-Object FullName,Length | Out-Host
            throw "alc.exe not found in VSIX."
          }
          echo "ALC_PATH=$($alc.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

      # 7) Debug: Projekt- und Symbolübersicht
      - name: Show repo tree (debug)
        shell: pwsh
        run: |
          Write-Host "=== Files in bc/src ==="
          Get-ChildItem -Recurse -File "bc/src" | Select-Object FullName, Length | Format-Table -AutoSize
          Write-Host "=== Symbol packages in .alpackages ==="
          Get-ChildItem ".alpackages" | Select-Object Name, Length | Format-Table -AutoSize

      # 8) Build .app mit alc (nutzt .alpackages)
      - name: Build .app with alc
        shell: pwsh
        run: |
          & "${env:ALC_PATH}" /project:"./bc/src" /packagecachepath:"./.alpackages" /out:"./bc/dist/extension.app"
          if ($LASTEXITCODE -ne 0) { throw "ALC build failed." }

      # 9) .app als Artifact sichern
      - name: Upload .app artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-app
          path: bc/dist/extension.app

      # 10) Publish in Business Central (SaaS) – nutzt deine Secrets
      - name: Publish to Business Central (SaaS)
        shell: pwsh
        env:
          BC_MODE:           ${{ secrets.BC_MODE }}
          BC_TENANT_ID:      ${{ secrets.BC_TENANT_ID }}
          BC_CLIENT_ID:      ${{ secrets.BC_CLIENT_ID }}
          BC_CLIENT_SECRET:  ${{ secrets.BC_CLIENT_SECRET }}
          BC_ENV_NAME:       ${{ secrets.BC_ENV_NAME }}
        run: |
          ./ci/publish.ps1 -AppPath "bc/dist/extension.app"
